import { RaidEvent } from "./data/RaidEvent";
import { DMChannel, GroupDMChannel, TextChannel, Snowflake, Guild, CategoryChannel } from "discord.js";
import { RaidEventView } from "./RaidEventView";
import { Event } from "../base/Event";
import { PersistentView } from "../base/PersistentView";
import { Util } from "../Util";
import { LogView } from "../base/LogView";

/**
 * A text channel dedicated to a raid event.
 * Contains an embed at the top with event information.
 */
export class RaidEventChannel {
    public static async createInGuild(guild: Guild, category: CategoryChannel, event: RaidEvent) {
        const channel = await guild.createChannel(Util.toTextChannelName(event.name), {
            parent: category,
            topic: "Auto-generated by bot.",
            type: "text",
        }) as TextChannel;
        const logView = new LogView("Event Log", PersistentView.createInChannel(channel));
        // We want to render this immediately to make it appear before the event view
        logView.render(event.logEntries);

        const view = new RaidEventView(PersistentView.createInChannel(channel), event);
        return new RaidEventChannel(channel, view, logView);
    }

    public static async fromObj(guild: Guild, obj: object): Promise<RaidEventChannel> {
        const event = RaidEvent.deserialize(obj["event"]);
        const channelId = obj["channel"] as Snowflake;
        const messageId = obj["message"] as Snowflake;
        const logMessageId = obj["logMessage"] as Snowflake;

        const channel = guild.channels.get(channelId) as TextChannel;
        if (!channel) { throw new Error("Channel not found for " + event.name); }
        const message = await channel.fetchMessage(messageId);
        if (!message) { throw new Error("Message not found for " + event.name); }
        const logMessage = await channel.fetchMessage(logMessageId);
        const view = new RaidEventView(PersistentView.createFromMessage(message), event);
        const logView = new LogView("Event Log", PersistentView.createFromMessage(logMessage));
        return new RaidEventChannel(channel, view, logView);
    }

    private constructor(private readonly _channel: TextChannel | DMChannel | GroupDMChannel,
                        private readonly eventView: RaidEventView,
                        private readonly logView: LogView) {
        logView.render(eventView.data.logEntries);
        eventView.eventChanged.attach(() => {
            logView.render(eventView.data.logEntries);
        });
        // TODO: set permissions?
    }

    public get channel(): TextChannel | DMChannel | GroupDMChannel {
        return this._channel;
    }

    public get event(): RaidEvent {
        return this.eventView.data;
    }

    public get eventChanged(): Event<void> {
        return this.eventView.eventChanged;
    }

    /**
     * Converts this raid channel into a serializable object
     */
    public async toObj(): Promise<object> {
        const logMsg = await this.logView.message;
        const eventMsg = await this.eventView.message;
        return {
            channel: this._channel.id,
            event: this.eventView.data,
            logMessage: logMsg.id,
            message: eventMsg.id,
        };
    }
}
